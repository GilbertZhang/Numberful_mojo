module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input buttonup,            // Super cool button!
    input buttondown,
    input buttonleft,
    input buttonright,
    output io_seg[8],
    output io_sel[16]
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst){
      multi_seven_seg seg;        // button press counter
      pseudorandomnumber pseudorandomnumber;
      addgame addgame(.buttondown(buttondown),.buttonup(buttonup),.buttonleft(buttonleft),.buttonright(buttonright));
      
      
    }
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    led = 8h00;
    
    
    //addgame.sixteen = pseudorandomnumber.sixteen;
    addgame.sixteen = {4h1,4h1,4h1,4h1,4h1,4h1,4h1,4h1,4h1,4h1,4h1,4h1,4h1,4h1,4h1,4h1};
    seg.values = addgame.segment_display;
    //seg.values = pseudorandomnumber.sixteen;
    //seg.values = {4h1,4h2,4h3,4h4,4h5,4h6,4h7,4h8,4h9,4h0,4h1,4h2,4h3,4h4,4h5,4h6};
 
   
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
  }
}