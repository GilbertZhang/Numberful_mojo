/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     DIGITS = 8
*/
module alu_24 (
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg [7:0] out
  );
  
  localparam DIGITS = 4'h8;
  
  
  wire [8-1:0] M_my_boolean_out;
  boolean_33 my_boolean (
    .a(a),
    .b(b),
    .alufn(alufn[0+3-:4]),
    .out(M_my_boolean_out)
  );
  wire [8-1:0] M_my_adder_out;
  wire [1-1:0] M_my_adder_z;
  wire [1-1:0] M_my_adder_v;
  wire [1-1:0] M_my_adder_n;
  adder_34 my_adder (
    .a(a),
    .b(b),
    .alufn(alufn[0+0-:1]),
    .out(M_my_adder_out),
    .z(M_my_adder_z),
    .v(M_my_adder_v),
    .n(M_my_adder_n)
  );
  wire [8-1:0] M_my_comparator_out;
  comparator_35 my_comparator (
    .a(a),
    .b(b),
    .alufn(alufn[0+2-:3]),
    .out(M_my_comparator_out)
  );
  wire [8-1:0] M_my_shift_out;
  shift_36 my_shift (
    .a(a),
    .b(b),
    .alufn(alufn[0+1-:2]),
    .out(M_my_shift_out)
  );
  wire [8-1:0] M_my_mul_out;
  multiplier_37 my_mul (
    .a(a),
    .b(b),
    .alufn(alufn[0+1-:2]),
    .out(M_my_mul_out)
  );
  wire [8-1:0] M_my_mod_out;
  mod_38 my_mod (
    .a(a),
    .b(b),
    .alufn(alufn[0+2-:3]),
    .out(M_my_mod_out)
  );
  
  always @* begin
    out = 1'h0;
    
    case (alufn[4+1-:2])
      2'h0: begin
        if (alufn[2+0-:1] == 1'h1) begin
          out = M_my_mod_out;
        end else begin
          if (alufn[1+0-:1] == 1'h1) begin
            out = M_my_mul_out;
          end else begin
            out = M_my_adder_out;
          end
        end
      end
      2'h1: begin
        out = M_my_boolean_out;
      end
      2'h2: begin
        out = M_my_shift_out;
      end
      2'h3: begin
        out = M_my_comparator_out;
      end
      default: begin
        out = 1'h0;
      end
    endcase
  end
endmodule
