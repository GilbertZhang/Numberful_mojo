/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module addgame_4 (
    input clk,
    input rst,
    input buttonup,
    input buttondown,
    input buttonleft,
    input buttonright,
    input [63:0] sixteen,
    output reg [63:0] segment_display
  );
  
  
  
  localparam BEGIN_addtozero = 3'd0;
  localparam SELECT_addtozero = 3'd1;
  localparam UP_addtozero = 3'd2;
  localparam DOWN_addtozero = 3'd3;
  localparam LEFT_addtozero = 3'd4;
  localparam RIGHT_addtozero = 3'd5;
  localparam END_addtozero = 3'd6;
  
  reg [2:0] M_addtozero_d, M_addtozero_q = BEGIN_addtozero;
  wire [4-1:0] M_reg_position_out;
  reg [1-1:0] M_reg_position_en;
  reg [4-1:0] M_reg_position_data;
  register_10 reg_position (
    .clk(clk),
    .rst(rst),
    .en(M_reg_position_en),
    .data(M_reg_position_data),
    .out(M_reg_position_out)
  );
  wire [16-1:0] M_reg_step_out;
  reg [1-1:0] M_reg_step_en;
  reg [16-1:0] M_reg_step_data;
  register_11 reg_step (
    .clk(clk),
    .rst(rst),
    .en(M_reg_step_en),
    .data(M_reg_step_data),
    .out(M_reg_step_out)
  );
  wire [(5'h10+0)*4-1:0] M_reg_out;
  reg [(5'h10+0)-1:0] M_reg_en;
  reg [(5'h10+0)*4-1:0] M_reg_data;
  
  genvar GEN_reg0;
  generate
  for (GEN_reg0=0;GEN_reg0<5'h10;GEN_reg0=GEN_reg0+1) begin: reg_gen_0
    register_10 L_reg (
      .clk(clk),
      .rst(rst),
      .en(M_reg_en[GEN_reg0*(1)+(1)-1-:(1)]),
      .data(M_reg_data[GEN_reg0*(3'h4)+(3'h4)-1-:(3'h4)]),
      .out(M_reg_out[GEN_reg0*(3'h4)+(3'h4)-1-:(3'h4)])
    );
  end
  endgenerate
  wire [1-1:0] M_edge_detectorup_out;
  reg [1-1:0] M_edge_detectorup_in;
  edge_detector_13 edge_detectorup (
    .clk(clk),
    .in(M_edge_detectorup_in),
    .out(M_edge_detectorup_out)
  );
  wire [1-1:0] M_button_condup_out;
  reg [1-1:0] M_button_condup_in;
  button_conditioner_14 button_condup (
    .clk(clk),
    .in(M_button_condup_in),
    .out(M_button_condup_out)
  );
  wire [1-1:0] M_edge_detectordown_out;
  reg [1-1:0] M_edge_detectordown_in;
  edge_detector_13 edge_detectordown (
    .clk(clk),
    .in(M_edge_detectordown_in),
    .out(M_edge_detectordown_out)
  );
  wire [1-1:0] M_button_conddown_out;
  reg [1-1:0] M_button_conddown_in;
  button_conditioner_14 button_conddown (
    .clk(clk),
    .in(M_button_conddown_in),
    .out(M_button_conddown_out)
  );
  wire [1-1:0] M_edge_detectoruleft_out;
  reg [1-1:0] M_edge_detectoruleft_in;
  edge_detector_13 edge_detectoruleft (
    .clk(clk),
    .in(M_edge_detectoruleft_in),
    .out(M_edge_detectoruleft_out)
  );
  wire [1-1:0] M_button_condleft_out;
  reg [1-1:0] M_button_condleft_in;
  button_conditioner_14 button_condleft (
    .clk(clk),
    .in(M_button_condleft_in),
    .out(M_button_condleft_out)
  );
  wire [1-1:0] M_edge_detectorright_out;
  reg [1-1:0] M_edge_detectorright_in;
  edge_detector_13 edge_detectorright (
    .clk(clk),
    .in(M_edge_detectorright_in),
    .out(M_edge_detectorright_out)
  );
  wire [1-1:0] M_button_condright_out;
  reg [1-1:0] M_button_condright_in;
  button_conditioner_14 button_condright (
    .clk(clk),
    .in(M_button_condright_in),
    .out(M_button_condright_out)
  );
  
  reg [3:0] position_temp;
  
  reg [15:0] step_temp;
  
  reg [3:0] next_step;
  
  reg [3:0] counter_zero;
  
  integer i;
  
  always @* begin
    M_addtozero_d = M_addtozero_q;
    
    M_reg_position_en = 1'h1;
    M_reg_step_en = 1'h1;
    M_reg_en = 16'hffff;
    M_reg_position_data = 3'h6;
    M_reg_step_data = 1'h0;
    segment_display = M_reg_out;
    M_reg_data = sixteen;
    M_button_condup_in = ~buttonup;
    M_button_conddown_in = ~buttondown;
    M_button_condleft_in = ~buttonleft;
    M_button_condright_in = ~buttonright;
    M_edge_detectorup_in = M_button_condup_out;
    M_edge_detectordown_in = M_button_conddown_out;
    M_edge_detectoruleft_in = M_button_condleft_out;
    M_edge_detectorright_in = M_button_condright_out;
    
    case (M_addtozero_q)
      BEGIN_addtozero: begin
        M_reg_position_en = 1'h1;
        M_reg_position_data = 3'h6;
        M_reg_en = 16'hffff;
        M_reg_data = sixteen;
        M_reg_step_en = 1'h1;
        M_reg_step_data = 1'h0;
        M_addtozero_d = SELECT_addtozero;
      end
      SELECT_addtozero: begin
        M_reg_data = M_reg_out;
        M_reg_position_data = M_reg_position_out;
        M_reg_step_data = M_reg_step_out;
        if (M_edge_detectorup_out) begin
          M_addtozero_d = UP_addtozero;
        end
        if (M_edge_detectordown_out) begin
          M_addtozero_d = DOWN_addtozero;
        end
        if (M_edge_detectoruleft_out) begin
          M_addtozero_d = LEFT_addtozero;
        end
        if (M_edge_detectorright_out) begin
          M_addtozero_d = RIGHT_addtozero;
        end
      end
      UP_addtozero: begin
        position_temp = M_reg_position_out;
        M_reg_position_en = 1'h1;
        if (position_temp < 4'hc) begin
          M_reg_en[(position_temp)*1+0-:1] = 1'h1;
          M_reg_en[(position_temp + 3'h4)*1+0-:1] = 1'h1;
          next_step = M_reg_out[(position_temp + 3'h4)*4+3-:4] + M_reg_out[(position_temp)*4+3-:4];
          if (next_step > 4'h9) begin
            if (next_step > 5'h13) begin
              if (next_step == 5'h1e) begin
                next_step = next_step - 4'ha;
              end
              next_step = next_step - 4'ha;
            end
            next_step = next_step - 4'ha;
          end
          if (M_reg_out[(position_temp + 3'h4)*4+3-:4] == 1'h0) begin
            M_reg_data[(position_temp)*4+3-:4] = 1'h0;
          end
          M_reg_data[(position_temp + 3'h4)*4+3-:4] = next_step;
          M_reg_position_data = position_temp + 3'h4;
          M_reg_step_en = 1'h1;
          step_temp = M_reg_step_out;
          M_reg_step_data = step_temp + 1'h1;
        end
        M_addtozero_d = SELECT_addtozero;
      end
      DOWN_addtozero: begin
        position_temp = M_reg_position_out;
        M_reg_position_en = 1'h1;
        if (position_temp > 2'h3) begin
          M_reg_en[(position_temp)*1+0-:1] = 1'h1;
          M_reg_en[(position_temp - 3'h4)*1+0-:1] = 1'h1;
          next_step = M_reg_out[(position_temp - 3'h4)*4+3-:4] + M_reg_out[(position_temp)*4+3-:4];
          if (next_step > 4'h9) begin
            if (next_step > 5'h13) begin
              if (next_step == 5'h1e) begin
                next_step = next_step - 4'ha;
              end
              next_step = next_step - 4'ha;
            end
            next_step = next_step - 4'ha;
          end
          if (M_reg_out[(position_temp - 3'h4)*4+3-:4] == 1'h0) begin
            M_reg_data[(position_temp)*4+3-:4] = 1'h0;
          end
          M_reg_data[(position_temp - 3'h4)*4+3-:4] = next_step;
          M_reg_position_data = position_temp - 3'h4;
          M_reg_step_en = 1'h1;
          step_temp = M_reg_step_out;
          M_reg_step_data = step_temp + 1'h1;
        end
        M_addtozero_d = SELECT_addtozero;
      end
      LEFT_addtozero: begin
        position_temp = M_reg_position_out;
        M_reg_position_en = 1'h1;
        if (position_temp != 2'h3 && position_temp != 3'h7 && position_temp != 4'hb && position_temp != 4'hf) begin
          M_reg_en[(position_temp)*1+0-:1] = 1'h1;
          M_reg_en[(position_temp + 1'h1)*1+0-:1] = 1'h1;
          next_step = M_reg_out[(position_temp + 1'h1)*4+3-:4] + M_reg_out[(position_temp)*4+3-:4];
          if (next_step > 4'h9) begin
            if (next_step > 5'h13) begin
              if (next_step == 5'h1e) begin
                next_step = next_step - 4'ha;
              end
              next_step = next_step - 4'ha;
            end
            next_step = next_step - 4'ha;
          end
          if (M_reg_out[(position_temp + 1'h1)*4+3-:4] == 1'h0) begin
            M_reg_data[(position_temp)*4+3-:4] = 1'h0;
          end
          M_reg_data[(position_temp + 1'h1)*4+3-:4] = next_step;
          M_reg_position_data = position_temp + 1'h1;
          M_reg_step_en = 1'h1;
          step_temp = M_reg_step_out;
          M_reg_step_data = step_temp + 1'h1;
        end
        M_addtozero_d = SELECT_addtozero;
      end
      RIGHT_addtozero: begin
        position_temp = M_reg_position_out;
        M_reg_position_en = 1'h1;
        if (position_temp != 1'h0 && position_temp != 3'h4 && position_temp != 4'h8 && position_temp != 4'hc) begin
          M_reg_en[(position_temp)*1+0-:1] = 1'h1;
          M_reg_en[(position_temp - 1'h1)*1+0-:1] = 1'h1;
          next_step = M_reg_out[(position_temp - 1'h1)*4+3-:4] + M_reg_out[(position_temp)*4+3-:4];
          if (next_step > 4'h9) begin
            if (next_step > 5'h13) begin
              if (next_step == 5'h1e) begin
                next_step = next_step - 4'ha;
              end
              next_step = next_step - 4'ha;
            end
            next_step = next_step - 4'ha;
          end
          if (M_reg_out[(position_temp - 1'h1)*4+3-:4] == 1'h0) begin
            M_reg_data[(position_temp)*4+3-:4] = 1'h0;
          end
          M_reg_data[(position_temp - 1'h1)*4+3-:4] = next_step;
          M_reg_position_data = position_temp - 1'h1;
          M_reg_step_en = 1'h1;
          step_temp = M_reg_step_out;
          M_reg_step_data = step_temp + 1'h1;
        end
        M_addtozero_d = SELECT_addtozero;
      end
      END_addtozero: begin
        M_reg_position_en = 1'h0;
        M_reg_step_en = 1'h0;
        M_reg_en[0+15-:16] = 16'h0000;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_addtozero_q <= 1'h0;
    end else begin
      M_addtozero_q <= M_addtozero_d;
    end
  end
  
endmodule
