/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input buttonup,
    input buttondown,
    input buttonleft,
    input buttonright,
    output reg [7:0] io_seg,
    output reg [15:0] io_sel
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [16-1:0] M_seg_sel;
  reg [64-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [64-1:0] M_pseudorandomnumber_sixteen;
  pseudorandomnumber_3 pseudorandomnumber (
    .clk(clk),
    .rst(rst),
    .sixteen(M_pseudorandomnumber_sixteen)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_4 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    led = 8'h00;
    M_seg_values = M_pseudorandomnumber_sixteen;
    M_edge_detector_in = buttonup;
    if (M_edge_detector_out) begin
      M_seg_values = 64'h0000000000000000;
    end
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
  end
endmodule
